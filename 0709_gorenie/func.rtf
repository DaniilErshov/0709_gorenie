{\rtf1\ansi\ansicpg1251\deff0\nouicompat\deflang1049{\fonttbl{\f0\fnil Cascadia Mono;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;\red0\green0\blue0;\red43\green145\blue175;\red128\green128\blue128;\red111\green0\blue138;\red0\green128\blue0;\red163\green21\blue21;\red0\green128\blue128;\red47\green79\blue79;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\cf1\f0\fs19\lang9 int\cf2  Find_final_state_IDA(IO::\cf3 ChemkinReader\cf2 * \cf4 chemkinReader_temp\cf2 , \cf1 double\cf2 & \cf4 Tinitial\cf2 , \cf1 double\cf2 * \cf4 Y_vect\cf2 )\par
\{\par
    \cf1 void\cf2 * mem;\par
    \cf3 N_Vector\cf2  yy, yp, avtol, cons;\par
    \cf3 realtype\cf2  rtol, * yval, * ypval, * atval;\par
    \cf3 realtype\cf2  t0, tout, tret;\par
    \cf1 int\cf2  iout, retval, retvalr;\par
    \cf3 SUNMatrix\cf2  A;\par
    \cf3 SUNLinearSolver\cf2  LS;\par
    \cf3 SUNNonlinearSolver\cf2  NLS;\par
    \cf3 SUNContext\cf2  ctx;\par
    \cf3 UserData\cf2  data;\par
    data = (\cf3 UserData\cf2 )malloc(\cf1 sizeof\cf2  * data);\par
    \cf1 int\cf2  NEQ_Y = num_gas_species - 1;\par
    \cf1 int\cf2  NEQ = NEQ_Y + 1;\par
\par
\par
    \cf1 int\cf2  j = 0;\par
\par
    mem = \cf5 NULL\cf2 ;\par
    cons = yy = yp = avtol = \cf5 NULL\cf2 ;\par
    yval = ypval = atval = \cf5 NULL\cf2 ;\par
    A = \cf5 NULL\cf2 ;\par
    LS = \cf5 NULL\cf2 ;\par
    NLS = \cf5 NULL\cf2 ;\par
    \cf6 /* Create SUNDIALS context */\cf2\par
    retval = SUNContext_Create(\cf5 NULL\cf2 , &ctx);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "SUNContext_Create"\cf2 , 1)) \cf1 return\cf2 (1);\par
\par
    data->y = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->ydot = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->Xi = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->Yi = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->NEQ = NEQ;\par
    data->Tl = \cf4 Tinitial\cf2 ;\par
\par
    \cf1 for\cf2  (\cf1 int\cf2  i = 0; i < num_gas_species; i++) \{\par
        data->Yi[i] = \cf4 Y_vect\cf2 [i];\par
        \cf6 //cout << i << " = " << data->Yi[i] << endl;\cf2\par
    \}\par
\par
    \cf6 /* Allocate N-vectors. */\cf2\par
    yy = N_VNew_Serial(NEQ, ctx);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)yy, \cf7 "N_VNew_Serial"\cf2 , 0)) \cf1 return\cf2 (1);\par
    yp = N_VClone(yy);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)yp, \cf7 "N_VNew_Serial"\cf2 , 0)) \cf1 return\cf2 (1);\par
    avtol = N_VClone(yy);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)avtol, \cf7 "N_VNew_Serial"\cf2 , 0)) \cf1 return\cf2 (1);\par
    cons = N_VClone(yy);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)cons, \cf7 "N_VNew_Serial"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    \cf6 /* Create and initialize  y, y', and absolute tolerance vectors. */\cf2\par
    yval = N_VGetArrayPointer(yy);\par
    ypval = N_VGetArrayPointer(yp);\par
    rtol = \cf5 RCONST\cf2 (1.0e-14);\par
    atval = N_VGetArrayPointer(avtol);\par
    \cf6 /* Integration limits */\cf2\par
    t0 = \cf5 ZERO\cf2 ;\par
\par
    \cf1 for\cf2  (\cf1 int\cf2  i = 1; i < NEQ; i++) \{\par
        \cf5 Ith\cf2 (avtol, i) = \cf5 RCONST\cf2 (1.0e-14);\par
        \cf5 Ith\cf2 (yy, i) = \cf4 Y_vect\cf2 [i - 1];\par
    \}\par
\par
    \cf5 Ith\cf2 (avtol, NEQ) = \cf5 RCONST\cf2 (1.0e-14);\par
    \cf5 Ith\cf2 (yy, NEQ) = \cf4 Tinitial\cf2 ;\par
\par
    \cf1 double\cf2  sumY = 0;\par
    Get_molar_cons(data->Xi, \cf4 Y_vect\cf2 , \cf4 Tinitial\cf2 );\par
\par
    \cf1 for\cf2  (\cf1 int\cf2  k = 0; k < num_gas_species; k++) \{\par
        data->y[k] = data->Xi[k];\par
    \}\par
    chem_vel(data->wk_add, M, data->Yi, data->Yinext, data->x[i], data->x[i + 1], T_vect[i], T_vect[i + 1], data->Xi, data->ydot);;\par
\par
    \cf1 double\cf2  rho = rho = get_rho(\cf4 Y_vect\cf2 , \cf4 Tinitial\cf2 );\par
    \cf1 for\cf2  (\cf1 int\cf2  i = 1; i < NEQ; i++) \{\par
        \cf5 Ith\cf2 (yp, i) = data->ydot[i] * my_mol_weight(i) / rho;\par
    \}\par
\par
    \cf1 double\cf2  sum = myget_enthalpy(num_gas_species, \cf4 Y_vect\cf2 , \cf4 Tinitial\cf2 );\par
    \cf1 double\cf2  Cp = myget_Cp(num_gas_species, \cf4 Y_vect\cf2 , \cf4 Tinitial\cf2 );\par
    \cf1 double\cf2  sum2 = (1 - Y_N2) * 1. / 9. * myget_Hi(0, Tstart)\par
        + (1 - Y_N2) * 8. / 9. * myget_Hi(2, Tstart)\par
        + Y_N2 * myget_Hi(8, Tstart);\par
\par
    \cf6 //Ith(yp, NEQ) = -sum / Cp;\cf2\par
    \cf5 Ith\cf2 (yp, NEQ) = (sum - sum2) / rho / Cp ;\par
    cout \cf8 <<\cf2  \cf7 "Ith(yp, NEQ) = "\cf2  \cf8 <<\cf2  \cf5 Ith\cf2 (yp, NEQ) \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
    \cf6 /* Call IDACreate and IDAInit to initialize IDA memory */\cf2\par
    mem = IDACreate(ctx);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)mem, \cf7 "IDACreate"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    retval = IDAInit(mem, func_final_state, t0, yy, yp);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "IDAInit"\cf2 , 1)) \cf1 return\cf2 (1);\par
    \cf6 /* Call IDASVtolerances to set tolerances */\cf2\par
\par
    retval = IDASVtolerances(mem, rtol, avtol);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "IDASVtolerances"\cf2 , 1)) \cf1 return\cf2 (1);\par
    j = 1;\par
\par
    \cf1 for\cf2  (\cf1 int\cf2  i = 1; i <= NEQ; i++) \{\par
        \cf5 Ith\cf2 (cons, i) = 1.0;\par
    \}\par
\par
    retval = IDASetConstraints(mem, cons);\par
    retval = IDASetUserData(mem, data);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "IDASetUserData"\cf2 , 1)) \cf1 return\cf2 (1);\par
    retval = IDASetMaxNumSteps(mem, 80000);\par
    \cf6 /* Create dense SUNMatrix for use in linear solves */\cf2\par
    A = SUNDenseMatrix(NEQ, NEQ, ctx);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)A, \cf7 "SUNDenseMatrix"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    \cf6 /* Create dense SUNLinearSolver object */\cf2\par
    LS = SUNLinSol_Dense(yy, A, ctx);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)LS, \cf7 "SUNLinSol_Dense"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    \cf6 /* Attach the matrix and linear solver */\cf2\par
    retval = IDASetLinearSolver(mem, LS, A);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "IDASetLinearSolver"\cf2 , 1)) \cf1 return\cf2 (1);\par
\par
    NLS = SUNNonlinSol_Newton(yy, ctx);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)NLS, \cf7 "SUNNonlinSol_Newton"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    \cf6 /* Attach the nonlinear solver */\cf2\par
    retval = IDASetNonlinearSolver(mem, NLS);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "IDASetNonlinearSolver"\cf2 , 1)) \cf1 return\cf2 (1);\par
\par
    \cf6 /* In loop, call IDASolve, print results, and test for error.\cf2\par
\cf6        Break out of loop when NOUT preset output times have been reached. */\cf2\par
\par
    iout = 0; \par
    \cf1 double\cf2  tout1 = pow(10, 0);\par
    \cf1 double\cf2  tend = 100.;\par
    tout = tout1;\par
    \cf1 int\cf2  iend = 30;\par
    \cf1 int\cf2  number = 2;\par
    \cf3 ofstream\cf2  fout;\par
    \cf1 double\cf2  Y_H2, Y_O2;\par
    \cf1 double\cf2  W, w_dot;\par
    \cf1 double\cf2  sum_Y = 0;\par
    \cf1 while\cf2  (tout < tend) \{\par
        retval = IDASolve(mem, tout, &tret, yy, yp, \cf5 IDA_NORMAL\cf2 );\par
\par
        \cf1 if\cf2  ((iout + 1) % number == 0)\par
        \{\par
            sum_Y = 0;\par
            cout \cf8 <<\cf2  \cf7 "\\n\\n\\nt = "\cf2  \cf8 <<\cf2  tout \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
            \cf1 for\cf2  (\cf1 int\cf2  i = 0; i < num_gas_species - 1; i++) \{\par
                \cf1 if\cf2  (\cf5 Ith\cf2 (yy, i + 1) < 0) \cf5 Ith\cf2 (yy, i + 1) = 0;\par
                cout \cf8 <<\cf2  name_species[i] \cf8 <<\cf2  \cf7 "  =  "\cf2  \cf8 <<\cf2  \cf5 Ith\cf2 (yy, i + 1) \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
                sum_Y += \cf5 Ith\cf2 (yy, i + 1);\par
            \}\par
            \cf1 for\cf2  (\cf1 int\cf2  j = 0; j < num_gas_species - 1; j++) \{\par
                \cf4 Y_vect\cf2 [j] = \cf5 Ith\cf2 (yy, j + 1);\par
                \cf6 //cout << "Yi = " << Yi[j] << "\\n";\cf2\par
            \}\par
            Get_molar_cons(data->Xi, \cf4 Y_vect\cf2 , \cf5 Ith\cf2 (yy, NEQ));\par
            \cf1 for\cf2  (\cf1 int\cf2  k = 0; k < num_gas_species; k++) \{\par
                data->y[k] = data->Xi[k];\par
                \cf6 //cout << "Ith(data->y, k + 1) = " << Ith(data->y, k + 1) << "\\n";\cf2\par
            \}\par
            chem_vel(\cf5 Ith\cf2 (yy, NEQ), data->y, data->ydot);\par
\par
            \cf1 for\cf2  (\cf1 int\cf2  j = 0; j < num_gas_species - 1; j++) \{\par
                cout \cf8 <<\cf2  \cf7 "Ith(data->ydot, k + 1) = "\cf2  \cf8 <<\cf2  data->ydot[j] \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
            \}\par
\par
            sum_Y += Y_N2;\par
            sum2 = (1 - Y_N2) * 1. / 9. * myget_Hi(0, Tstart)\par
                + (1 - Y_N2) * 8. / 9. * myget_Hi(2, Tstart)\par
                + Y_N2 * myget_Hi(8, Tstart);\par
            sum = myget_enthalpy(num_gas_species, \cf4 Y_vect\cf2 , \cf5 Ith\cf2 (yy, num_gas_species));\par
            cout \cf8 <<\cf2  \cf7 "T   =  "\cf2  \cf8 <<\cf2  \cf5 Ith\cf2 (yy, num_gas_species) \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
            cout \cf8 <<\cf2  \cf7 "sumy = "\cf2  \cf8 <<\cf2  sum_Y \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
            cout \cf8 <<\cf2  \cf7 "enthalpy eq = "\cf2  \cf8 <<\cf2  sum - sum2 \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
        \}\par
\par
        \cf1 if\cf2  (check_retval(&retval, \cf7 "IDASolve"\cf2 , 1)) \cf1 return\cf2 (1);\par
\par
        iout++;\par
        tout += tout1;\par
    \}\par
    \cf1 for\cf2  (\cf1 int\cf2  k_spec = 0; k_spec < num_gas_species - 1; k_spec++) \{\par
        \cf4 Y_vect\cf2 [k_spec] = \cf5 Ith\cf2 (yy, k_spec + 1);\par
    \}\par
\par
    \cf4 Tinitial\cf2  = \cf5 Ith\cf2 (yy, num_gas_species);\par
    \cf6 /* Print final statistics to the screen */\cf2\par
    cout \cf8 <<\cf2  \cf7 "\\nFinal Statistics:\\n"\cf2 ;\par
    retval = IDAPrintAllStats(mem, \cf5 stdout\cf2 , \cf9 SUN_OUTPUTFORMAT_TABLE\cf2 );\par
\par
\par
    \cf6 /* Free memory */\cf2\par
    IDAFree(&mem);\par
    SUNNonlinSolFree(NLS);\par
    SUNLinSolFree(LS);\par
    SUNMatDestroy(A);\par
    N_VDestroy(avtol);\par
    N_VDestroy(yy);\par
    N_VDestroy(yp);\par
    N_VDestroy(cons);\par
    SUNContext_Free(&ctx);\par
\par
    \cf1 return\cf2 (retval);\par
\}\par
\par
\cf1 static\cf2  \cf1 int\cf2  func_final_state(\cf3 realtype\cf2  \cf4 tres\cf2 , \cf3 N_Vector\cf2  \cf4 yy\cf2 , \cf3 N_Vector\cf2  \cf4 yp\cf2 , \cf3 N_Vector\cf2  \cf4 rr\cf2 , \cf1 void\cf2 * \cf4 user_data\cf2 )\par
\{\par
    \cf3 realtype\cf2 * yval, * ypval, * rval;\par
    \cf3 UserData\cf2  data;\par
    \cf3 realtype\cf2 * x_cells, * T_vect, * Y_vect, * Tp_vect, * Yp_vect;\par
    \cf1 double\cf2 * Yi;\par
    \cf1 double\cf2  Temp;\par
    \cf1 double\cf2  M;\par
    data = (\cf3 UserData\cf2 )\cf4 user_data\cf2 ;\par
    T_vect = data->T;\par
    x_cells = data->x;\par
    \cf1 int\cf2  j;\par
    Yi = data->Yi;\par
    yval = N_VGetArrayPointer(\cf4 yy\cf2 );\par
    ypval = N_VGetArrayPointer(\cf4 yp\cf2 );\par
    rval = N_VGetArrayPointer(\cf4 rr\cf2 );\par
    \cf6 //cout << "ypvalres0 = " << yval[0] << "\\n";\cf2\par
\par
    \cf1 double\cf2  sumY = 0;\par
    \cf1 for\cf2  (\cf1 int\cf2  j = 0; j < num_gas_species - 1; j++) \{\par
        sumY += yval[j];\par
        Yi[j] = yval[j];\par
    \}\par
    Yi[num_gas_species - 1] = Y_N2;\par
    Temp = yval[num_gas_species - 1];\par
\par
    Get_molar_cons(data->Xi, Yi, Temp);\par
    \cf1 for\cf2  (\cf1 int\cf2  k = 0; k < num_gas_species; k++) \{\par
        data->y[k] = data->Xi[k];\par
    \}\par
    chem_vel(Temp, data->y, data->ydot);\par
    \cf1 double\cf2  rho = get_rho(Yi, Temp);\par
    \cf1 for\cf2  (j = 0; j < num_gas_species - 1; j++) \{\par
        rval[j] = rho * ypval[j] - data->ydot[j] * my_mol_weight(j);\par
    \}\par
    \cf1 double\cf2  sum = 0;\par
    \par
    \cf1 double\cf2  Cp = myget_Cp(num_gas_species, Yi, Temp);\par
    \cf1 double\cf2  sum2;\par
    sum2 = (1 - Y_N2) * 1. / 9. * myget_Hi(0, Tstart)\par
        + (1 - Y_N2) * 8. / 9. * myget_Hi(2, Tstart)\par
        + Y_N2 * myget_Hi(8, Tstart);\par
\par
    sum = myget_enthalpy(num_gas_species, Yi, Temp);\par
\par
    rval[num_gas_species - 1] = rho * Cp * ypval[num_gas_species - 1] + (sum - sum2);\par
    \cf1 return\cf2 (0);\par
\}\par
\cf0\f1\fs22\par
\cf1\f0\fs19 int\cf2  find_M(IO::\cf3 ChemkinReader\cf2 * \cf4 chemkinReader_temp\cf2 , \cf1 int\cf2  \cf4 N_x\cf2 , \cf3 vector\cf2 <\cf1 double\cf2 >& \cf4 x_vect\cf2 ,\par
    \cf3 vector\cf2 <\cf1 double\cf2 >& \cf4 T_vect\cf2 , \cf3 vector\cf2 <\cf1 double\cf2 >& \cf4 Y_vect\cf2 , \cf1 double\cf2 & \cf4 M\cf2 , \cf1 int\cf2  \cf4 N_center\cf2 , \cf1 double\cf2 * \cf4 Y_leftb\cf2 )\par
\{\par
    \cf1 void\cf2 * mem;\par
    \cf3 N_Vector\cf2  yy, yp, avtol, cons;\par
    \cf3 realtype\cf2  rtol, * yval, * ypval, * atval, * consval;\par
    \cf3 realtype\cf2  t0, tout, tret;\par
    \cf1 int\cf2  iout, retval, retvalr;\par
    \cf3 SUNMatrix\cf2  A;\par
    \cf3 SUNLinearSolver\cf2  LS;\par
    \cf3 SUNNonlinearSolver\cf2  NLS;\par
    \cf3 SUNContext\cf2  ctx;\par
    \cf3 UserData\cf2  data;\par
    data = (\cf3 UserData\cf2 )malloc(\cf1 sizeof\cf2  * data);\par
    \cf1 int\cf2  NEQ_Y = num_gas_species * (\cf4 N_x\cf2  - 2);\par
    \cf1 int\cf2  NEQ = 1;\par
\par
\par
    \cf1 int\cf2  j = 0;\par
\par
    mem = \cf5 NULL\cf2 ;\par
    cons = yy = yp = avtol = \cf5 NULL\cf2 ;\par
    yval = ypval = atval = \cf5 NULL\cf2 ;\par
    A = \cf5 NULL\cf2 ;\par
    LS = \cf5 NULL\cf2 ;\par
    NLS = \cf5 NULL\cf2 ;\par
    \cf6 /* Create SUNDIALS context */\cf2\par
    retval = SUNContext_Create(\cf5 NULL\cf2 , &ctx);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "SUNContext_Create"\cf2 , 1)) \cf1 return\cf2 (1);\par
\par
    data->Nx = \cf4 N_x\cf2 ;\par
    data->x = \cf1 new\cf2  \cf3 realtype\cf2 [\cf4 N_x\cf2 ];\par
\par
    data->Yi = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->Yiprev = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->Yinext = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
\par
    data->Xiprev = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->Xi = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->Xinext = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->gradX = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->Y_tmp = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
\par
    data->Y_left_bound = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->wk_add = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->T = \cf1 new\cf2  \cf3 realtype\cf2 [\cf4 N_x\cf2 ];\par
    data->NEQ = NEQ;\par
    data->Tl = \cf4 T_vect\cf8 [\cf2 0\cf8 ]\cf2 ;\par
    data->T_center = \cf4 T_vect\cf8 [\cf4 N_center\cf8 ]\cf2 ;\par
    cout \cf8 <<\cf2  \cf7 "T_center = "\cf2  \cf8 <<\cf2  data->T_center \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
    data->N_centr = \cf4 N_center\cf2 ;\par
    data->chemkinReader = \cf4 chemkinReader_temp\cf2 ;\par
    data->y = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->ydot = \cf1 new\cf2  \cf3 realtype\cf2 [num_gas_species];\par
    data->N_m = 1 - 1;\par
    t0 = \cf5 ZERO\cf2 ;\par
\par
\par
    \cf1 for\cf2  (\cf1 int\cf2  i = 0; i < \cf4 N_x\cf2 ; i++) \{\par
        data->x[i] = \cf4 x_vect\cf8 [\cf2 i\cf8 ]\cf2 ;\par
        data->T[i] = \cf4 T_vect\cf8 [\cf2 i\cf8 ]\cf2 ;\par
    \}\par
\par
    \cf1 for\cf2  (\cf1 int\cf2  i = 0; i < num_gas_species; i++) \{\par
        data->y[i] = 0;\par
        data->ydot[i] = 0;\par
        data->Y_left_bound[i] = \cf4 Y_leftb\cf2 [i];\par
    \}\par
\par
\par
    \cf6 /* Allocate N-vectors. */\cf2\par
    yy = N_VNew_Serial(NEQ, ctx);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)yy, \cf7 "N_VNew_Serial"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    yp = N_VClone(yy);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)yp, \cf7 "N_VNew_Serial"\cf2 , 0)) \cf1 return\cf2 (1);\par
    avtol = N_VClone(yy);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)avtol, \cf7 "N_VNew_Serial"\cf2 , 0)) \cf1 return\cf2 (1);\par
    cons = N_VClone(yy);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)cons, \cf7 "N_VNew_Serial"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    \cf5 Ith\cf2 (cons, 1) = \cf5 ONE\cf2 ;\par
    \cf5 Ith\cf2 (avtol, 1) = \cf5 RCONST\cf2 (1.0e-8);\par
    \cf5 Ith\cf2 (yy, 1) = \cf4 M\cf2 ;\par
\par
    MakeYvectors(data->Yiprev, data->Yi, data->Yinext, yval, data->Y_left_bound, \cf4 N_x\cf2 , \cf4 N_center\cf2 );\par
    Get_molar_cons(data->Xi, data->Yi, \cf4 T_vect\cf8 [\cf4 N_center\cf8 ]\cf2 );\par
    Get_molar_cons(data->Xiprev, data->Yiprev, \cf4 T_vect\cf8 [\cf4 N_center\cf2  - 1\cf8 ]\cf2 );\par
    Get_molar_cons(data->Xinext, data->Yinext, \cf4 T_vect\cf8 [\cf4 N_center\cf2  + 1\cf8 ]\cf2 );\par
    \cf1 for\cf2  (\cf1 int\cf2  k = 0; k < num_gas_species; k++)data->y[k] = data->Xi[k];\par
    chem_vel(\cf4 T_vect\cf8 [\cf4 N_center\cf8 ]\cf2 , data->y, data->ydot);\par
\par
    \cf5 Ith\cf2 (yp, 1) = -F_right(data->chemkinReader, data->Yi, data->Yinext,\par
        data->T[\cf4 N_center\cf2  - 1], data->T[\cf4 N_center\cf2 ], data->T[\cf4 N_center\cf2  + 1],\par
        data->x[\cf4 N_center\cf2  - 1], data->x[\cf4 N_center\cf2 ], data->x[\cf4 N_center\cf2  + 1],\par
        data->Xiprev, data->Xi, data->Xinext, data->gradX, data->Y_tmp,\par
        data->M, data->ydot, data->wk_add);\par
\par
    yval = N_VGetArrayPointer(yy);\par
    ypval = N_VGetArrayPointer(yp);\par
    rtol = \cf5 RCONST\cf2 (1.0e-10);\par
    atval = N_VGetArrayPointer(avtol);\par
    consval = N_VGetArrayPointer(cons);\par
\par
    \cf6 /* Call IDACreate and IDAInit to initialize IDA memory */\cf2\par
    mem = IDACreate(ctx);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)mem, \cf7 "IDACreate"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    retval = IDAInit(mem, func_M, t0, yy, yp);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "IDAInit"\cf2 , 1)) \cf1 return\cf2 (1);\par
    \cf6 /* Call IDASVtolerances to set tolerances */\cf2\par
\par
    retval = IDASVtolerances(mem, rtol, avtol);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "IDASVtolerances"\cf2 , 1)) \cf1 return\cf2 (1);\par
\par
    retval = IDASetConstraints(mem, cons);\par
    retval = IDASetUserData(mem, data);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "IDASetUserData"\cf2 , 1)) \cf1 return\cf2 (1);\par
    retval = IDASetMaxNumSteps(mem, 80000);\par
    \cf6 /* Create dense SUNMatrix for use in linear solves */\cf2\par
    A = SUNDenseMatrix(NEQ, NEQ, ctx);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)A, \cf7 "SUNDenseMatrix"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    \cf6 /* Create dense SUNLinearSolver object */\cf2\par
    LS = SUNLinSol_Dense(yy, A, ctx);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)LS, \cf7 "SUNLinSol_Dense"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    \cf6 /* Attach the matrix and linear solver */\cf2\par
    retval = IDASetLinearSolver(mem, LS, A);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "IDASetLinearSolver"\cf2 , 1)) \cf1 return\cf2 (1);\par
\par
    NLS = SUNNonlinSol_Newton(yy, ctx);\par
    \cf1 if\cf2  (check_retval((\cf1 void\cf2 *)NLS, \cf7 "SUNNonlinSol_Newton"\cf2 , 0)) \cf1 return\cf2 (1);\par
\par
    \cf6 /* Attach the nonlinear solver */\cf2\par
    retval = IDASetNonlinearSolver(mem, NLS);\par
    \cf1 if\cf2  (check_retval(&retval, \cf7 "IDASetNonlinearSolver"\cf2 , 1)) \cf1 return\cf2 (1);\par
\par
    \cf6 /* In loop, call IDASolve, print results, and test for error.\cf2\par
\cf6        Break out of loop when NOUT preset output times have been reached. */\cf2\par
\par
    iout = 0;\par
    \cf1 double\cf2  tout1 = pow(10, -7);\par
    tout = tout1;\par
    \cf1 int\cf2  iend = 500;\par
    \cf1 int\cf2  number = 100;\par
    \cf3 ofstream\cf2  fout;\par
    \cf1 double\cf2  Y_H2, Y_O2;\par
    \cf1 double\cf2  W, w_dot;\par
    \cf1 double\cf2  sum_Y = 0;\par
    \cf3 ofstream\cf2  f_ida;\par
    \cf1 while\cf2  (iout < iend) \{\par
        retval = IDASolve(mem, tout, &tret, yy, yp, \cf5 IDA_NORMAL\cf2 );\par
        cout \cf8 <<\cf2  \cf7 "tout = "\cf2  \cf8 <<\cf2  tout \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
        cout \cf8 <<\cf2  \cf7 "M = "\cf2  \cf8 <<\cf2  yval[0] \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
        \cf1 if\cf2  (check_retval(&retval, \cf7 "IDASolve"\cf2 , 1)) \cf1 return\cf2 (1);\par
\par
        iout++;\par
        tout += tout1;\par
    \}\par
\par
    \cf6 /* Print final statistics to the screen */\cf2\par
    cout \cf8 <<\cf2  \cf7 "\\nFinal Statistics:\\n"\cf2 ;\par
    retval = IDAPrintAllStats(mem, \cf5 stdout\cf2 , \cf9 SUN_OUTPUTFORMAT_TABLE\cf2 );\par
\par
    \cf6 /* Print final statistics to a file in CSV format */\cf2\par
    \cf6 //FID = fopen("idaRoberts_dns_stats.csv", "w");\cf2\par
    \cf6 //retval = IDAPrintAllStats(mem, FID, SUN_OUTPUTFORMAT_CSV);\cf2\par
    \cf6 //fclose(FID);\cf2\par
\par
    \cf6 /* check the solution error */\cf2\par
    \cf6 //retval = check_ans(yy, tret, rtol, avtol);\cf2\par
\par
    \cf6 /* Free memory */\cf2\par
    IDAFree(&mem);\par
    SUNNonlinSolFree(NLS);\par
    SUNLinSolFree(LS);\par
    SUNMatDestroy(A);\par
    N_VDestroy(avtol);\par
    N_VDestroy(yy);\par
    N_VDestroy(yp);\par
    N_VDestroy(cons);\par
    SUNContext_Free(&ctx);\par
\par
    \cf1 return\cf2 (retval);\par
\}\par
\par
\cf1 static\cf2  \cf1 int\cf2  func_M(\cf3 realtype\cf2  \cf4 tres\cf2 , \cf3 N_Vector\cf2  \cf4 yy\cf2 , \cf3 N_Vector\cf2  \cf4 yp\cf2 , \cf3 N_Vector\cf2  \cf4 rr\cf2 , \cf1 void\cf2 * \cf4 user_data\cf2 )\par
\{\par
    \cf3 realtype\cf2 * yval, * ypval, * rval;\par
    \cf3 UserData\cf2  data;\par
    \cf3 realtype\cf2 * x_cells, * T_vect, * Y_vect, * Tp_vect, * Yp_vect, * Yiprev, * Yinext;\par
    \cf1 double\cf2 * Yi;\par
    \cf1 double\cf2  Temp;\par
    \cf1 double\cf2  M;\par
    data = (\cf3 UserData\cf2 )\cf4 user_data\cf2 ;\par
    T_vect = data->T;\par
    x_cells = data->x;\par
    \cf1 int\cf2  j;\par
    Yi = data->Yi;\par
    x_cells = data->x;\par
    T_vect = data->T;\par
    Yi = data->Yi;\par
    Yiprev = data->Yiprev;\par
    Yinext = data->Yinext;\par
    \cf1 int\cf2  myNx = data->Nx;\par
    \cf1 int\cf2  myNeq = data->NEQ;\par
    \cf1 int\cf2  myNm = data->N_m;\par
    yval = N_VGetArrayPointer(\cf4 yy\cf2 );\par
    ypval = N_VGetArrayPointer(\cf4 yp\cf2 );\par
    rval = N_VGetArrayPointer(\cf4 rr\cf2 );\par
    \cf1 int\cf2  Ncentr = data->N_centr;\par
\par
    MakeYvectors(Yiprev, Yi, Yinext, yval, data->Y_left_bound, myNx, Ncentr);\par
    Get_molar_cons(data->Xi, data->Yi, T_vect[Ncentr]);\par
    Get_molar_cons(data->Xiprev, data->Yiprev, T_vect[Ncentr - 1]);\par
    Get_molar_cons(data->Xinext, data->Yinext, T_vect[Ncentr + 1]);\par
    \cf1 for\cf2  (\cf1 int\cf2  k = 0; k < num_gas_species; k++) data->y[k] = data->Xi[k];\par
\par
\par
    chem_vel(T_vect[Ncentr], data->y, data->ydot);\par
    \cf1 double\cf2  rho = get_rho(Yi, T_vect[Ncentr]);\par
    data->M = yval[0];\par
    rval[0] = ypval[0] + F_right(data->chemkinReader, data->Yi, data->Yinext,\par
        data->T[Ncentr - 1], data->T[Ncentr], data->T[Ncentr + 1],\par
        data->x[Ncentr - 1], data->x[Ncentr], data->x[Ncentr + 1],\par
        data->Xiprev, data->Xi, data->Xinext, data->gradX, data->Y_tmp,\par
        data->M, data->ydot, data->wk_add);\par
\par
    cout \cf8 <<\cf2  \cf7 "fdata[0]"\cf2  \cf8 <<\cf2  rval[0] \cf8 <<\cf2  \cf7 "\\n"\cf2 ;\par
\par
    \cf1 return\cf2 (0);\par
\}\cf0\f1\fs22\par
}
 